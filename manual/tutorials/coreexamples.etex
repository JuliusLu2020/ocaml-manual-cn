\chapter{核心语言} \label{c:core-xamples}
%HEVEA\cutname{coreexamples.html}

这一部分文档是OCaml语言的教程简介。在这里，文档假设读者对一种传统语言（如C或Java）具有一定的熟悉度，但读者不必具备函数式编程的相关经验。本章主要介绍核心语言。
第\ref{c:moduleexamples}章讨论模块系统，第\ref{c:objectexamples}涵盖面向对象特性，第~\ref{c:labl-examples} 章介绍核心语言的拓展（标签参数和多态变体），第\ref{c:advexamples}章则给出了若干高级示例.

\section{基础}

对于OCaml的概览，我们将使用交互式系统（即顶层环境）。读者可以在Unix shell中运行 "ocaml" 命令或者在Windows系统中运行 "OCamlwin.exe" 程序来启动OCaml顶层环境。本教程以交互式系统会话的文本形式呈现：以 "#" 符号开始的行表示用户输入；系统的响应则在用户输入之下显示，系统响应行不具备前导的 "#" 符号。

在交互式系统中，面对 "#" 命令行，用户输入以 ";;" 结尾的Ocaml语句，系统将会动态地编译、执行这些语句，并输出运行结果。语句可以是简单的表达式，或者标识符（值或函数）的 "let" 定义。
\begin{caml_example}{toplevel}
1+2*3;;
let pi = 4.0 *. atan 1.0;;
let square x = x *. x;;
square (sin pi) +. square (cos pi);;
\end{caml_example}
OCaml系统计算每个语句的值和类型。即使是函数参数也不需要显式的类型声明：系统将根据它们的使用情况自动推断出它们的类型。需要注意的是，在Ocaml中，整数与浮点数对应不同的数据类型，有不同的运算符： "+" 和 "*" 作用于整数, "+." 和 "*." 作用于浮点数。
\begin{caml_example}{toplevel}[error]
1.0 * 2;;
\end{caml_example}

递归函数由 "let rec" 绑定定义：
\begin{caml_example}{toplevel}
let rec fib n =
  if n < 2 then n else fib (n-1) + fib (n-2);;
fib 10;;
\end{caml_example}

\section{数据类型}

除了整数和浮点数之外，OCaml还提供常见的基本数据类型：
\begin{itemize}%
\item 布尔型
\begin{caml_example}{toplevel}
(1 < 2) = false;;
let one = if true then 1 else 2;;
\end{caml_example}
\item 字符型
\begin{caml_example}{toplevel}
 'a';;
 int_of_char '\n';;
\end{caml_example}
\item 不可变字符串
\begin{caml_example}{toplevel}
"Hello" ^ " " ^ "world";;
{|This is a quoted string, here, neither \ nor " are special characters|};;
{|"\\"|}="\"\\\\\"";;
  {delimiter|the end of this|}quoted string is here|delimiter}
=           "the end of this|}quoted string is here";;
\end{caml_example}
\end{itemize}

预定义的数据结构包括元组、数组和列表。同时OCaml也具备自行定义数据结构的通用机制，如记录和变体，稍后将更详细地介绍。现在，我们先主要考虑列表。列表可以通过分号分隔的元素的方括号列表的形式给出，也可以在空列表 "[]" （即 ``nil''）的基础上使用 "::" （`cons''）运算符在其前面添加元素以构建列表。 
\begin{caml_example}{toplevel}
let l = ["is"; "a"; "tale"; "told"; "etc."];;
"Life" :: l;;
\end{caml_example}
与所有其他OCaml数据结构一样，列表不需要显式地在内存中分配和释放：OCaml中的内存管理都是完全自动的。类似地，OCaml中没有对指针的显式处理：OCaml编译器会在需要的时候自动引入指针。

与大多数OCaml数据结构一样，检查和解构列表是通过模式匹配来执行的。列表模式具有与列表表达式完全相同的形式，其中标识符表示列表中未指定的部分。例如，下面是列表中的插入排序示例：
\begin{caml_example}{toplevel}
let rec sort lst =
  match lst with
    [] -> []
  | head :: tail -> insert head (sort tail)
and insert elt lst =
  match lst with
    [] -> [elt]
  | head :: tail -> if elt <= head then elt :: lst else head :: insert elt tail
;;
sort l;;
\end{caml_example}

上述示例中"sort"函数被推导出的类型"'a list -> 'a list"意味着"sort"函数可以作用于任何类型的列表。类型"'a"是一个类型变量，其代表任意给定的类型。"sort"可以作用于任何类型的列表的原因是，Ocaml中的比较运算（"="、"<="、等）是多态的：他们可以作用于相同类型的任意两个值。这使得"sort"也在所有的列表类型上具有多态性。
\begin{caml_example}{toplevel}
sort [6;2;5;3];;
sort [3.14; 2.718];;
\end{caml_example}

以上的"sort"函数并不会修改它的输入列表：它会构建并返回一个包含与输入列表相同元素且按升序排列的新列表。事实上，在OCaml中，一个列表在被构建后就无法被修改：我们将列表称之为不可变数据结构。大多数OCaml数据结构都是不可变的，但少数（其中最典型的是数组）是可变的，这意味着它们可以在任何时间被直接修改。

具有多个参数的函数类型的记法为"arg1_type -> arg2_type -> ... -> return_type"。例如，"insert"函数的类型为"'a -> 'a list -> 'a list"，其意味着"insert"接受两个参数，一个是任意类型"'a"的元素，另一个是具有相同类型"'a"的元素的列表，并返回相同类型的列表。
\section{函数作为值}

OCaml是一种函数式语言：完全数学意义上的函数是被支持的，可以像其他数据一样自由地传递。例如，这是一个以浮点函数为参数并返回其导数函数近似值的"deriv"函数：
\begin{caml_example}{toplevel}
let deriv f dx = function x -> (f (x +. dx) -. f x) /. dx;;
let sin' = deriv sin 1e-6;;
sin' pi;;
\end{caml_example}
我们甚至可以定义复合函数：
\begin{caml_example}{toplevel}
let compose f g = function x -> f (g x);;
let cos2 = compose square cos;;
\end{caml_example}
将其他函数作为参数的函数称为“泛函”（functionals）或“高阶函数”（higher-order functions）。高阶函数对于在数据结构上提供迭代器或类似的通用操作非常有用。例如，OCaml标准库提供了一个"List.map"函数，它将给定的函数应用于列表的每个元素，并返回结果列表：
\begin{caml_example}{toplevel}
List.map (function n -> n * 2 + 1) [0;1;2;3;4];;
\end{caml_example}
像一些其他列表和数组函数一样，这个函数是预定义的，因为它非常实用。但是事实上这个函数非常简单，我们可以定义"map"函数如下：
\begin{caml_example}{toplevel}
let rec map f l =
  match l with
    [] -> []
  | hd :: tl -> f hd :: map f tl;;
\end{caml_example}

\section{记录与变体}
\label{s:tut-recvariants}

用户定义的数据结构包括记录（record）和变体（variant）。两者都是用"type"声明定义的。在这里，我们声明一个记录类型来表示有理数。
\begin{caml_example}{toplevel}
type ratio = {num: int; denom: int};;
let add_ratio r1 r2 =
  {num = r1.num * r2.denom + r2.num * r1.denom;
   denom = r1.denom * r2.denom};;
add_ratio {num=1; denom=3} {num=2; denom=5};;
\end{caml_example}
记录字段也可以通过模式匹配来访问：
\begin{caml_example}{toplevel}
let integer_part r =
  match r with
    {num=num; denom=denom} -> num / denom;;
\end{caml_example}
由于这种模式匹配只有一种情况，因此可以在记录模式中直接展开参数"r"：
\begin{caml_example}{toplevel}
let integer_part {num=num; denom=denom} = num / denom;;
\end{caml_example}
不需要的字段可以被省略：
\begin{caml_example}{toplevel}
let get_denom {denom=denom} = denom;;
\end{caml_example}
可选地，通过在字段列表的末尾加上通配符"_"，可以显式地显示缺少的字段：
\begin{caml_example}{toplevel}
let get_num {num=num; _ } = num;;
\end{caml_example}
当"="的两边相同时，可以通过省略"=字段"部分来避免重复字段名：
\begin{caml_example}{toplevel}
let integer_part {num; denom} = num / denom;;
\end{caml_example}
这个字段的简短记法在构造记录时也同样适用：
\begin{caml_example}{toplevel}
let ratio num denom = {num; denom};;
\end{caml_example}
最后，可以一次更新一条记录的几个字段：
\begin{caml_example}{toplevel}
  let integer_product integer ratio = { ratio with num = integer * ratio.num };;
\end{caml_example}
使用如上的更新记法，"with"右侧的字段会被更新，其左侧记录中的其他字段会被原样复制。

变体类型的声明列出了该类型值的所有可能形式。每种情况都由一个名为构造函数的名称标识，构造函数既用于构造变体类型的值，也用于通过模式匹配检查它们的值。构造函数名称要大写，以便与变量名称（必须以小写字母开头）区分开来。例如，这里有一个用于混合运算（整数和浮点数）的变体类型：
\begin{caml_example}{toplevel}
type number = Int of int | Float of float | Error;;
\end{caml_example}
该声明表示类型"number"的值要么是整数，要么是浮点数，要么是表示无效运算结果（例如除以0）的常量"Error"。

枚举类型是变体类型的一种特殊情况，其中所有选项都是常量：
\begin{caml_example}{toplevel}
type sign = Positive | Negative;;
let sign_int n = if n >= 0 then Positive else Negative;;
\end{caml_example}

为了定义"number"类型的算术运算，我们对运算涉及的两个数字使用模式匹配：
\begin{caml_example}{toplevel}
let add_num n1 n2 =
  match (n1, n2) with
    (Int i1, Int i2) ->
      (* Check for overflow of integer addition *)
      if sign_int i1 = sign_int i2 && sign_int (i1 + i2) <> sign_int i1
      then Float(float i1 +. float i2)
      else Int(i1 + i2)
  | (Int i1, Float f2) -> Float(float i1 +. f2)
  | (Float f1, Int i2) -> Float(f1 +. float i2)
  | (Float f1, Float f2) -> Float(f1 +. f2)
  | (Error, _) -> Error
  | (_, Error) -> Error;;
add_num (Int 123) (Float 3.14159);;
\end{caml_example}

变体类型的另一个有趣的例子是内置的"'a option"类型，它表示一个类型"'a"的值或没有值：
\begin{caml_example}{toplevel}
type 'a option = Some of 'a | None;;
\end{caml_example}
定义在通常情况下可能失败的函数时，这种类型特别有用。示例如下：
\begin{caml_example}{toplevel}
let safe_square_root x = if x > 0. then Some(sqrt x) else None;;
\end{caml_example}

变体类型最常见的用法是描述递归数据结构。例如，二叉树的类型：
\begin{caml_example}{toplevel}
type 'a btree = Empty | Node of 'a * 'a btree * 'a btree;;
\end{caml_example}
该定义如下所示：一个包含类型"'a"（任意类型）的值的二叉树要么是空的，要么是一个包含类型"'a"的值的节点和两个也包含类型"'a"的值的子树，即两个"'a btree"。

对二叉树的操作可以表示为与类型定义相同结构的递归函数。例如，以下是在有序二叉树中执行查找和插入的函数（元素从左到右递增）：
\begin{caml_example}{toplevel}
let rec member x btree =
  match btree with
    Empty -> false
  | Node(y, left, right) ->
      if x = y then true else
      if x < y then member x left else member x right;;
let rec insert x btree =
  match btree with
    Empty -> Node(x, Empty, Empty)
  | Node(y, left, right) ->
      if x <= y then Node(y, insert x left, right)
                else Node(y, left, insert x right);;
\end{caml_example}


\subsection{记录与变体消歧义Record and variant disambiguation}
（在第一次阅读时可以跳过这个小节）

机敏的读者可能想知道，当两个或多个记录字段或构造函数使用相同的名称时会发生什么。

\begin{caml_example*}{toplevel}
type first_record  = { x:int; y:int; z:int }
type middle_record = { x:int; z:int }
type last_record   = { x:int };;
type first_variant = A | B | C
type last_variant  = A;;
\end{caml_example*}

答案是，当面对多个选项时，OCaml会尝试使用本地可用的信息来消除各种字段和构造函数之间的歧义。首先，如果已知记录或变体的类型，OCaml可以明确地选择对应的字段或构造函数。例如：

\begin{caml_example}{toplevel}
let look_at_x_then_z (r:first_record) =
  let x = r.x in
  x + r.z;;
let permute (x:first_variant) = match x with
  | A -> (B:first_variant)
  | B -> A
  | C -> C;;
type wrapped = First of first_record
let f (First r) = r, r.x;;
\end{caml_example}

在第一个例子中，"(r:first_record)"是一个显式注释，它告诉OCaml参数"r"的类型是"first_record"。通过这个注释，Ocaml知道"r.x"是第一个记录类型的"x"字段。类似地，第二个示例中的类型注释向OCaml表明构造函数"A"、"B"、"C"来自第一个变体类型。相反地，在最后一个示例中，OCaml自己推断"r"的类型只能是"first_record"，不需要显式类型注释。

实际上，这些显式类型注释可以在任何地方使用。在大多数情况下，它们不是必要的，但是它们对于指导消歧义、调试意外的类型错误或者结合后面章节中描述的OCaml的一些更高级的特性非常有用。

其次，对于记录，OCaml还可以通过查看表达式或模式中使用的字段集来推断正确的记录类型：
\begin{caml_example}{toplevel}
let project_and_rotate {x;y; _ } = { x= - y; y = x ; z = 0} ;;
\end{caml_example}

由于字段"x"和"y"只能同时出现在第一个记录类型中，OCaml推断"project_and_rotate"的类型为"first_record -> first_record"。

最后，如果没有足够的信息来消除不同字段或构造函数之间的歧义，OCaml会在所有本地有效的选项中选择最后定义的类型：

\begin{caml_example}{toplevel}
let look_at_xz {x;z} = x;;
\end{caml_example}

在这里，OCaml推断"{x;z}"类型的可能选择是"first_record"和"middle_record"，因为"last_record"类型没有字段"z"。随后，Ocaml会选择这两种可能性之间最后定义的类型"middle_record"。

需要注意这种消歧义方法是局部性的：一旦Ocaml选择了一种类型，它就会坚持这个选择，即使此后它会导致一个类型错误：

\begin{caml_example}{toplevel}[error]
let look_at_x_then_y r =
  let x = r.x in (* Ocaml deduces [r: last_record] *)
  x + r.y;;
let is_a_or_b x = match x with
  | A -> true (* OCaml infers [x: last_variant] *)
  | B -> true;;
\end{caml_example}

此外，最后定义的类型处于一个非常不稳定的位置。在添加或移动类型定义，或者在打开一个模块之后（参见第\ref{c:moduleexamples}章），这一位置可能会偷偷地改变。因此，添加显式类型注释来完成类型消歧义比依赖于最后定义的类型进行消歧义更加健壮。

\section{Imperative features}

Though all examples so far were written in purely applicative style,
OCaml is also equipped with full imperative features. This includes the
usual "while" and "for" loops, as well as mutable data structures such
as arrays. Arrays are either created by listing semicolon-separated element
values between "[|" and "|]" brackets, or allocated and initialized with the
"Array.make" function, then filled up later by assignments. For instance, the
function below sums two vectors (represented as float arrays) componentwise.
\begin{caml_example}{toplevel}
let add_vect v1 v2 =
  let len = min (Array.length v1) (Array.length v2) in
  let res = Array.make len 0.0 in
  for i = 0 to len - 1 do
    res.(i) <- v1.(i) +. v2.(i)
  done;
  res;;
add_vect [| 1.0; 2.0 |] [| 3.0; 4.0 |];;
\end{caml_example}

Record fields can also be modified by assignment, provided they are
declared "mutable" in the definition of the record type:
\begin{caml_example}{toplevel}
type mutable_point = { mutable x: float; mutable y: float };;
let translate p dx dy =
  p.x <- p.x +. dx; p.y <- p.y +. dy;;
let mypoint = { x = 0.0; y = 0.0 };;
translate mypoint 1.0 2.0;;
mypoint;;
\end{caml_example}

OCaml has no built-in notion of variable -- identifiers whose current
value can be changed by assignment. (The "let" binding is not an
assignment, it introduces a new identifier with a new scope.)
However, the standard library provides references, which are mutable
indirection cells, with operators "!" to fetch
the current contents of the reference and ":=" to assign the contents.
Variables can then be emulated by "let"-binding a reference. For
instance, here is an in-place insertion sort over arrays:
\begin{caml_example}{toplevel}
let insertion_sort a =
  for i = 1 to Array.length a - 1 do
    let val_i = a.(i) in
    let j = ref i in
    while !j > 0 && val_i < a.(!j - 1) do
      a.(!j) <- a.(!j - 1);
      j := !j - 1
    done;
    a.(!j) <- val_i
  done;;
\end{caml_example}

References are also useful to write functions that maintain a current
state between two calls to the function. For instance, the following
pseudo-random number generator keeps the last returned number in a
reference:
\begin{caml_example}{toplevel}
let current_rand = ref 0;;
let random () =
  current_rand := !current_rand * 25713 + 1345;
  !current_rand;;
\end{caml_example}

Again, there is nothing magical with references: they are implemented as
a single-field mutable record, as follows.
\begin{caml_example}{toplevel}
type 'a ref = { mutable contents: 'a };;
let ( ! ) r = r.contents;;
let ( := ) r newval = r.contents <- newval;;
\end{caml_example}

In some special cases, you may need to store a polymorphic function in
a data structure, keeping its polymorphism.  Doing this requires
user-provided type annotations, since polymorphism is only introduced
automatically for global definitions.  However, you can explicitly give
polymorphic types to record fields.
\begin{caml_example}{toplevel}
type idref = { mutable id: 'a. 'a -> 'a };;
let r = {id = fun x -> x};;
let g s = (s.id 1, s.id true);;
r.id <- (fun x -> print_string "called id\n"; x);;
g r;;
\end{caml_example}

\section{Exceptions}

OCaml provides exceptions for signalling and handling exceptional
conditions. Exceptions can also be used as a general-purpose non-local
control structure, although this should not be overused since it can
make the code harder to understand. Exceptions are declared with the
"exception" construct, and signalled with the "raise" operator. For instance,
the function below for taking the head of a list uses an exception to
signal the case where an empty list is given.
\begin{caml_example}{toplevel}
exception Empty_list;;
let head l =
  match l with
    [] -> raise Empty_list
  | hd :: tl -> hd;;
head [1;2];;
head [];;
\end{caml_example}

Exceptions are used throughout the standard library to signal cases
where the library functions cannot complete normally. For instance,
the "List.assoc" function, which returns the data associated with a
given key in a list of (key, data) pairs, raises the predefined
exception "Not_found" when the key does not appear in the list:
\begin{caml_example}{toplevel}
List.assoc 1 [(0, "zero"); (1, "one")];;
List.assoc 2 [(0, "zero"); (1, "one")];;
\end{caml_example}

Exceptions can be trapped with the "try"\ldots"with" construct:
\begin{caml_example}{toplevel}
let name_of_binary_digit digit =
  try
    List.assoc digit [0, "zero"; 1, "one"]
  with Not_found ->
    "not a binary digit";;
name_of_binary_digit 0;;
name_of_binary_digit (-1);;
\end{caml_example}

The "with" part does pattern matching on the
exception value with the same syntax and behavior as "match". Thus,
several exceptions can be caught by one
"try"\ldots"with" construct:
\begin{caml_example}{toplevel}
let rec first_named_value values names =
  try
    List.assoc (head values) names
  with
  | Empty_list -> "no named value"
  | Not_found -> first_named_value (List.tl values) names;;
first_named_value [ 0; 10 ] [ 1, "one"; 10, "ten"];;
\end{caml_example}

Also, finalization can be performed by
trapping all exceptions, performing the finalization, then re-raising
the exception:
\begin{caml_example}{toplevel}
let temporarily_set_reference ref newval funct =
  let oldval = !ref in
  try
    ref := newval;
    let res = funct () in
    ref := oldval;
    res
  with x ->
    ref := oldval;
    raise x;;
\end{caml_example}

An alternative to "try"\ldots"with" is to catch the exception while
pattern matching:
\begin{caml_example}{toplevel}
let assoc_may_map f x l =
  match List.assoc x l with
  | exception Not_found -> None
  | y -> f y;;
\end{caml_example}
Note that this construction is only useful if the exception is raised
between "match"\ldots"with". Moreover, exceptions can only
appear at the toplevel of such a pattern match.
For instance, exception cases cannot currently be combined with an
or-pattern: "exception A | exception B ->" \ldots .

When exceptions are used as a control structure, it can be useful to make
them as local as possible by using a locally defined exception.
For instance, with
\begin{caml_eval}
  let ref x: _ ref = {contents=x};;
\end{caml_eval}
\begin{caml_example}{toplevel}
let fixpoint f x =
  let exception Done in
  let x = ref x in
  try while true do
      let y = f !x in
      if !x = y then raise Done else x := y
    done; assert false
  with Done -> !x;;
\end{caml_example}
the function "f" cannot raise a "Done" exception, which removes an
entire class of misbehaving functions.

\section{Symbolic processing of expressions}

We finish this introduction with a more complete example
representative of the use of OCaml for symbolic processing: formal
manipulations of arithmetic expressions containing variables. The
following variant type describes the expressions we shall manipulate:
\begin{caml_example}{toplevel}
type expression =
    Const of float
  | Var of string
  | Sum of expression * expression    (* e1 + e2 *)
  | Diff of expression * expression   (* e1 - e2 *)
  | Prod of expression * expression   (* e1 * e2 *)
  | Quot of expression * expression   (* e1 / e2 *)
;;
\end{caml_example}

We first define a function to evaluate an expression given an
environment that maps variable names to their values. For simplicity,
the environment is represented as an association list.
\begin{caml_example}{toplevel}
exception Unbound_variable of string;;
let rec eval env exp =
  match exp with
    Const c -> c
  | Var v ->
      (try List.assoc v env with Not_found -> raise (Unbound_variable v))
  | Sum(f, g) -> eval env f +. eval env g
  | Diff(f, g) -> eval env f -. eval env g
  | Prod(f, g) -> eval env f *. eval env g
  | Quot(f, g) -> eval env f /. eval env g;;
eval [("x", 1.0); ("y", 3.14)] (Prod(Sum(Var "x", Const 2.0), Var "y"));;
\end{caml_example}

Now for a real symbolic processing, we define the derivative of an
expression with respect to a variable "dv":
\begin{caml_example}{toplevel}
let rec deriv exp dv =
  match exp with
    Const c -> Const 0.0
  | Var v -> if v = dv then Const 1.0 else Const 0.0
  | Sum(f, g) -> Sum(deriv f dv, deriv g dv)
  | Diff(f, g) -> Diff(deriv f dv, deriv g dv)
  | Prod(f, g) -> Sum(Prod(f, deriv g dv), Prod(deriv f dv, g))
  | Quot(f, g) -> Quot(Diff(Prod(deriv f dv, g), Prod(f, deriv g dv)),
                       Prod(g, g))
;;
deriv (Quot(Const 1.0, Var "x")) "x";;
\end{caml_example}

\section{Pretty-printing}

As shown in the examples above, the internal representation (also
called {\em abstract syntax\/}) of expressions quickly becomes hard to
read and write as the expressions get larger. We need a printer and a
parser to go back and forth between the abstract syntax and the {\em
concrete syntax}, which in the case of expressions is the familiar
algebraic notation (e.g. "2*x+1").

For the printing function, we take into account the usual precedence
rules (i.e. "*" binds tighter than "+") to avoid printing unnecessary
parentheses. To this end, we maintain the current operator precedence
and print parentheses around an operator only if its precedence is
less than the current precedence.
\begin{caml_example}{toplevel}
let print_expr exp =
  (* Local function definitions *)
  let open_paren prec op_prec =
    if prec > op_prec then print_string "(" in
  let close_paren prec op_prec =
    if prec > op_prec then print_string ")" in
  let rec print prec exp =     (* prec is the current precedence *)
    match exp with
      Const c -> print_float c
    | Var v -> print_string v
    | Sum(f, g) ->
        open_paren prec 0;
        print 0 f; print_string " + "; print 0 g;
        close_paren prec 0
    | Diff(f, g) ->
        open_paren prec 0;
        print 0 f; print_string " - "; print 1 g;
        close_paren prec 0
    | Prod(f, g) ->
        open_paren prec 2;
        print 2 f; print_string " * "; print 2 g;
        close_paren prec 2
    | Quot(f, g) ->
        open_paren prec 2;
        print 2 f; print_string " / "; print 3 g;
        close_paren prec 2
  in print 0 exp;;
let e = Sum(Prod(Const 2.0, Var "x"), Const 1.0);;
print_expr e; print_newline ();;
print_expr (deriv e "x"); print_newline ();;
\end{caml_example}

%%%%%%%%%%% Should be moved to the camlp4 documentation.
%% Parsing (transforming concrete syntax into abstract syntax) is usually
%% more delicate. OCaml offers several tools to help write parsers:
%% on the one hand, OCaml versions of the lexer generator Lex and the
%% parser generator Yacc (see chapter~\ref{c:ocamlyacc}), which handle
%% LALR(1) languages using push-down automata; on the other hand, a
%% predefined type of streams (of characters or tokens) and
%% pattern-matching over streams, which facilitate the writing of
%% recursive-descent parsers for LL(1) languages. An example using
%% "ocamllex" and "ocamlyacc" is given in
%% chapter~\ref{c:ocamlyacc}. Here, we will use stream parsers.
%% The syntactic support for stream parsers is provided by the Camlp4
%% preprocessor, which can be loaded into the interactive toplevel via
%% the "#load" directives below.
%%
%% \begin{caml_example}
%% #load "dynlink.cma";;
%% #load "camlp4o.cma";;
%% open Genlex;;
%% let lexer = make_lexer ["("; ")"; "+"; "-"; "*"; "/"];;
%% \end{caml_example}
%% For the lexical analysis phase (transformation of the input text into
%% a stream of tokens), we use a ``generic'' lexer provided in the
%% standard library module "Genlex". The "make_lexer" function takes a
%% list of keywords and returns a lexing function that ``tokenizes'' an
%% input stream of characters. Tokens are either identifiers, keywords,
%% or literals (integer, floats, characters, strings). Whitespace and
%% comments are skipped.
%% \begin{caml_example}
%% let token_stream = lexer (Stream.of_string "1.0 +x");;
%% Stream.next token_stream;;
%% Stream.next token_stream;;
%% Stream.next token_stream;;
%% \end{caml_example}
%%
%% The parser itself operates by pattern-matching on the stream of
%% tokens. As usual with recursive descent parsers, we use several
%% intermediate parsing functions to reflect the precedence and
%% associativity of operators. Pattern-matching over streams is more
%% powerful than on regular data structures, as it allows recursive calls
%% to parsing functions inside the patterns, for matching sub-components of
%% the input stream. See the Camlp4 documentation for more details.
%%
%% %Already said above
%% %In order to use stream parsers at toplevel, we must first load the
%% %"camlp4" preprocessor.
%% %\begin{caml_example}
%% %#load"camlp4o.cma";;
%% %\end{caml_example}
%% %Then we are ready to define our parser.
%% \begin{caml_example}{toplevel}
%% let rec parse_expr = parser
%%     [< e1 = parse_mult; e = parse_more_adds e1 >] -> e
%% and parse_more_adds e1 = parser
%%     [< 'Kwd "+"; e2 = parse_mult; e = parse_more_adds (Sum(e1, e2)) >] -> e
%%   | [< 'Kwd "-"; e2 = parse_mult; e = parse_more_adds (Diff(e1, e2)) >] -> e
%%   | [< >] -> e1
%% and parse_mult = parser
%%     [< e1 = parse_simple; e = parse_more_mults e1 >] -> e
%% and parse_more_mults e1 = parser
%%     [< 'Kwd "*"; e2 = parse_simple; e = parse_more_mults (Prod(e1, e2)) >] -> e
%%   | [< 'Kwd "/"; e2 = parse_simple; e = parse_more_mults (Quot(e1, e2)) >] -> e
%%   | [< >] -> e1
%% and parse_simple = parser
%%     [< 'Ident s >] -> Var s
%%   | [< 'Int i >] -> Const(float i)
%%   | [< 'Float f >] -> Const f
%%   | [< 'Kwd "("; e = parse_expr; 'Kwd ")" >] -> e;;
%% let parse_expression = parser [< e = parse_expr; _ = Stream.empty >] -> e;;
%% \end{caml_example}
%%
%% Composing the lexer and parser, we finally obtain a function to read
%% an expression from a character string:
%% \begin{caml_example}
%% let read_expression s = parse_expression (lexer (Stream.of_string s));;
%% read_expression "2*(x+y)";;
%% \end{caml_example}
%% A small puzzle: why do we get different results in the following two
%% examples?
%% \begin{caml_example}
%% read_expression "x - 1";;
%% read_expression "x-1";;
%% \end{caml_example}
%% Answer: the generic lexer provided by "Genlex" recognizes negative
%% integer literals as one integer token.  Hence, "x-1" is read as
%% the token "Ident \"x\"" followed by the token "Int(-1)"; this sequence
%% does not match any of the parser rules.  On the other hand,
%% the second space in "x - 1" causes the lexer to return the three
%% expected tokens: "Ident \"x\"", then "Kwd \"-\"", then "Int(1)".

\section{Standalone OCaml programs}

All examples given so far were executed under the interactive system.
OCaml code can also be compiled separately and executed
non-interactively using the batch compilers "ocamlc" and "ocamlopt".
The source code must be put in a file with extension ".ml". It
consists of a sequence of phrases, which will be evaluated at runtime
in their order of appearance in the source file. Unlike in interactive
mode, types and values are not printed automatically; the program must
call printing functions explicitly to produce some output.  The ";;" used
in the interactive examples is not required in
source files created for use with OCaml compilers, but can be helpful
to mark the end of a top-level expression unambiguously even when
there are syntax errors.
Here is a
sample standalone program to print Fibonacci numbers:
\begin{verbatim}
(* File fib.ml *)
let rec fib n =
  if n < 2 then 1 else fib (n-1) + fib (n-2);;
let main () =
  let arg = int_of_string Sys.argv.(1) in
  print_int (fib arg);
  print_newline ();
  exit 0;;
main ();;
\end{verbatim}
"Sys.argv" is an array of strings containing the command-line
parameters. "Sys.argv.(1)" is thus the first command-line parameter.
The program above is compiled and executed with the following shell
commands:
\begin{verbatim}
$ ocamlc -o fib fib.ml
$ ./fib 10
89
$ ./fib 20
10946
\end{verbatim}

More complex standalone OCaml programs are typically composed of
multiple source files, and can link with precompiled libraries.
Chapters~\ref{c:camlc} and~\ref{c:nativecomp} explain how to use the
batch compilers "ocamlc" and "ocamlopt".  Recompilation of
multi-file OCaml projects can be automated using third-party
build systems, such as the
\href{https://github.com/ocaml/ocamlbuild/}{ocamlbuild}
compilation manager.
